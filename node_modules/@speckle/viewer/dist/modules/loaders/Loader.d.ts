import EventEmitter from '../EventEmitter.js';
export declare enum LoaderEvent {
    LoadProgress = "load-progress",
    LoadCancelled = "load-cancelled",
    LoadWarning = "load-warning"
}
export interface LoaderEventPayload {
    [LoaderEvent.LoadProgress]: {
        progress: number;
        id: string;
    };
    [LoaderEvent.LoadCancelled]: string;
    [LoaderEvent.LoadWarning]: {
        message: string;
    };
}
export declare abstract class Loader extends EventEmitter {
    protected _resource: string;
    protected _resourceData: string | ArrayBuffer | undefined;
    abstract get resource(): string;
    abstract get finished(): boolean;
    protected constructor(resource: string, resourceData?: string | ArrayBuffer | undefined);
    on<T extends LoaderEvent>(eventType: T, listener: (arg: LoaderEventPayload[T]) => void): void;
    abstract load(): Promise<boolean>;
    abstract cancel(): void;
    dispose(): void;
}
