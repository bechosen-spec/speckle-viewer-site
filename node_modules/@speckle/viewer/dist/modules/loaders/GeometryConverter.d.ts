import { type GeometryData } from '../converter/Geometry.js';
import type { NodeData } from '../tree/WorldTree.js';
export declare enum SpeckleType {
    View3D = "View3D",
    BlockInstance = "BlockInstance",
    Pointcloud = "Pointcloud",
    Brep = "Brep",
    Mesh = "Mesh",
    Point = "Point",
    Line = "Line",
    Polyline = "Polyline",
    Box = "Box",
    Polycurve = "Polycurve",
    Curve = "Curve",
    Circle = "Circle",
    Arc = "Arc",
    Ellipse = "Ellipse",
    RevitInstance = "RevitInstance",
    Text = "Text",
    Transform = "Transform",
    InstanceProxy = "InstanceProxy",
    RenderMaterialProxy = "RenderMaterialProxy",
    Unknown = "Unknown"
}
export declare const SpeckleTypeAllRenderables: SpeckleType[];
export declare abstract class GeometryConverter {
    abstract getSpeckleType(node: NodeData): SpeckleType;
    abstract convertNodeToGeometryData(node: NodeData): GeometryData | null;
    abstract disposeNodeGeometryData(node: NodeData): void;
}
