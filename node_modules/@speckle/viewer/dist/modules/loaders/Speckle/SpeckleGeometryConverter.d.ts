import { type GeometryData } from '../../converter/Geometry.js';
import { type NodeData } from '../../tree/WorldTree.js';
import { GeometryConverter, SpeckleType } from '../GeometryConverter.js';
export declare class SpeckleGeometryConverter extends GeometryConverter {
    typeLookupTable: {
        [type: string]: SpeckleType;
    };
    getSpeckleType(node: NodeData): SpeckleType;
    convertNodeToGeometryData(node: NodeData): GeometryData | null;
    disposeNodeGeometryData(node: NodeData): void;
    private View3DToGeometryData;
    private TransformToGeometryData;
    /** BLOCK INSTANCE */
    private BlockInstanceToGeometryData;
    /** REVIT INSTANCE */
    private RevitInstanceToGeometryData;
    /** DUI3 INSTANCE PROXY */
    private InstanceProxyToGeometyData;
    /**
     * POINT CLOUD
     */
    private PointcloudToGeometryData;
    /**
     * BREP
     */
    private BrepToGeometryData;
    /**
     * MESH
     */
    private MeshToGeometryData;
    /**
     * TEXT
     */
    private TextToGeometryData;
    /**
     * POINT
     */
    private PointToGeometryData;
    /**
     * LINE
     */
    private LineToGeometryData;
    /**
     * POLYLINE
     */
    private PolylineToGeometryData;
    /**
     * BOX
     */
    private BoxToGeometryData;
    /**
     * POLYCURVE
     */
    private PolycurveToGeometryData;
    /**
     * CURVE
     */
    private CurveToGeometryData;
    /**
     * CIRCLE
     */
    private CircleToGeometryData;
    /**
     * ARC
     */
    private ArcToGeometryData;
    /**
     * ELLIPSE
     */
    private EllipseToGeometryData;
    /**
     * UTILS
     */
    private getCircularCurvePoints;
    private PointToVector3;
    private PointToFloatArray;
    private FlattenVector3Array;
    private unpackColors;
    private srgbToLinear;
}
