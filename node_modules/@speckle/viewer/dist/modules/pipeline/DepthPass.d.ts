import { Material, OrthographicCamera, PerspectiveCamera, Plane, Scene, Side, Texture, WebGLRenderTarget, WebGLRenderer } from 'three';
import { BaseSpecklePass, type SpecklePass } from './SpecklePass.js';
export declare enum DepthType {
    PERSPECTIVE_DEPTH = 0,
    LINEAR_DEPTH = 1
}
export declare enum DepthSize {
    FULL = 0,
    HALF = 1
}
export declare class DepthPass extends BaseSpecklePass implements SpecklePass {
    private renderTarget;
    private renderTargetHalf;
    private depthMaterial;
    private depthBufferSize;
    private scene;
    private camera;
    private colorBuffer;
    onBeforeRender: (() => void) | undefined;
    onAfterRender: (() => void) | undefined;
    get displayName(): string;
    get material(): Material;
    get outputTexture(): Texture;
    get outputTextureHalf(): Texture;
    get outputRenderTarget(): WebGLRenderTarget;
    set depthType(value: DepthType);
    set depthSize(value: DepthSize);
    set depthSide(value: Side);
    constructor();
    setClippingPlanes(planes: Plane[]): void;
    update(scene: Scene, camera: PerspectiveCamera | OrthographicCamera): void;
    render(renderer: WebGLRenderer): void;
    setSize(width: number, height: number): void;
}
