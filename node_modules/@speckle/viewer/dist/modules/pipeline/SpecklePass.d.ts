import { Camera, OrthographicCamera, PerspectiveCamera, Plane, Scene, Texture, WebGLRenderTarget } from 'three';
import { Pass } from 'three/examples/jsm/postprocessing/Pass.js';
import { ObjectLayers } from '../../IViewer.js';
export declare enum RenderType {
    NORMAL = 0,
    ACCUMULATION = 1
}
export type InputColorTextureUniform = 'tDiffuse';
export type InputDepthTextureUniform = 'tDepth';
export type InputNormalsTextureUniform = 'tNormal';
export type InputColorInterpolateTextureUniform = 'tDiffuseInterp';
export interface SpecklePass {
    onBeforeRender?: () => void;
    onAferRender?: () => void;
    outputRenderTarget?: WebGLRenderTarget;
    get displayName(): string;
    get outputTexture(): Texture | null;
    update?(scene: Scene | null, camera: PerspectiveCamera | OrthographicCamera | null): void;
    setTexture?(uName: string, texture: Texture): void;
    setParams?(params: unknown): void;
    setClippingPlanes?(planes: Plane[]): void;
    setLayers?(layers: ObjectLayers[]): void;
}
export interface SpeckleProgressivePass extends SpecklePass {
    setFrameIndex(index: number): void;
    setAccumulationFrames(frames: number): void;
    setRenderType?(type: RenderType): void;
}
export declare abstract class BaseSpecklePass extends Pass implements SpecklePass {
    protected layers: ObjectLayers[] | null;
    protected _enabledLayers: ObjectLayers[];
    get enabledLayers(): ObjectLayers[];
    constructor();
    get displayName(): string;
    get outputTexture(): Texture | null;
    setLayers(layers: ObjectLayers[]): void;
    enableLayer(layer: ObjectLayers, value: boolean): void;
    protected applyLayers(camera: Camera): void;
}
