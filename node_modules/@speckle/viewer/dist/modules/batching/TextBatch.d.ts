import { Box3, Material, Object3D, WebGLRenderer } from 'three';
import { NodeRenderView } from '../tree/NodeRenderView.js';
import { type Batch, type BatchUpdateRange, type DrawGroup, GeometryType } from './Batch.js';
import { SpeckleText } from '../objects/SpeckleText.js';
export default class TextBatch implements Batch {
    id: string;
    subtreeId: string;
    renderViews: NodeRenderView[];
    batchMaterial: Material;
    mesh: SpeckleText;
    get bounds(): Box3;
    get drawCalls(): number;
    get minDrawCalls(): number;
    get triCount(): number;
    get vertCount(): number;
    constructor(id: string, subtreeId: string, renderViews: NodeRenderView[]);
    get pointCount(): number;
    get lineCount(): number;
    get geometryType(): GeometryType;
    get renderObject(): Object3D;
    getCount(): number;
    get materials(): Material[];
    get groups(): DrawGroup[];
    setBatchMaterial(material: Material): void;
    onUpdate(deltaTime: number): void;
    onRender(renderer: WebGLRenderer): void;
    setVisibleRange(ranges: BatchUpdateRange[]): void;
    getVisibleRange(): BatchUpdateRange;
    getOpaque(): BatchUpdateRange;
    getDepth(): BatchUpdateRange;
    getTransparent(): BatchUpdateRange;
    getStencil(): BatchUpdateRange;
    setBatchBuffers(range: BatchUpdateRange[]): void;
    setDrawRanges(ranges: BatchUpdateRange[]): void;
    resetDrawRanges(): void;
    buildBatch(): Promise<void>;
    getRenderView(index: number): NodeRenderView;
    getMaterialAtIndex(index: number): Material;
    getMaterial(rv: NodeRenderView): Material;
    purge(): void;
}
