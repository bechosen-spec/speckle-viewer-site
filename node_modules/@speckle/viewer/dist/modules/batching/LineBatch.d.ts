import { Box3, InstancedInterleavedBuffer, Material, Object3D, WebGLRenderer } from 'three';
import { LineSegments2 } from 'three/examples/jsm/lines/LineSegments2.js';
import { LineSegmentsGeometry } from 'three/examples/jsm/lines/LineSegmentsGeometry.js';
import SpeckleLineMaterial from '../materials/SpeckleLineMaterial.js';
import { NodeRenderView } from '../tree/NodeRenderView.js';
import { type Batch, type BatchUpdateRange, type DrawGroup, GeometryType } from './Batch.js';
export default class LineBatch implements Batch {
    id: string;
    subtreeId: string;
    renderViews: NodeRenderView[];
    protected geometry: LineSegmentsGeometry;
    batchMaterial: SpeckleLineMaterial;
    protected mesh: LineSegments2;
    colorBuffer: InstancedInterleavedBuffer;
    private static readonly vector4Buffer;
    get bounds(): Box3;
    get drawCalls(): number;
    get minDrawCalls(): number;
    get triCount(): number;
    get vertCount(): number;
    constructor(id: string, subtreeId: string, renderViews: NodeRenderView[]);
    get pointCount(): number;
    get lineCount(): number;
    get renderObject(): Object3D;
    get geometryType(): GeometryType;
    get materials(): Material[];
    get groups(): DrawGroup[];
    getCount(): number;
    setBatchMaterial(material: SpeckleLineMaterial): void;
    onUpdate(deltaTime: number): void;
    onRender(renderer: WebGLRenderer): void;
    setVisibleRange(ranges: BatchUpdateRange[]): void;
    getVisibleRange(): BatchUpdateRange;
    getOpaque(): BatchUpdateRange;
    getDepth(): BatchUpdateRange;
    getTransparent(): BatchUpdateRange;
    getStencil(): BatchUpdateRange;
    setBatchBuffers(ranges: BatchUpdateRange[]): void;
    setDrawRanges(ranges: BatchUpdateRange[]): void;
    resetDrawRanges(): void;
    buildBatch(): Promise<void>;
    getRenderView(index: number): NodeRenderView | null;
    getMaterialAtIndex(index: number): Material;
    /** TODO: I wish we wouldn't clone the material here...  */
    getMaterial(rv: NodeRenderView): Material;
    private makeLineGeometry;
    private makeLineGeometryTriangle;
    private updateColorBuffer;
    purge(): void;
}
