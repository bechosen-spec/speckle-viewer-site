"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a, _RelativeURL_fakeOrigin;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelativeURL = void 0;
/**
 * Similar to URL, except without the requirement of having a valid origin/baseUrl
 */
class RelativeURL extends URL {
    constructor(url) {
        super(url, __classPrivateFieldGet(_a, _a, "f", _RelativeURL_fakeOrigin));
    }
    get host() {
        throw new Error('host is not supported in a relative URL');
    }
    get hostname() {
        throw new Error('hostname is not supported in a relative URL');
    }
    get href() {
        return this.pathname + this.search + this.hash;
    }
    get origin() {
        throw new Error('origin is not supported in a relative URL');
    }
    get password() {
        throw new Error('password is not supported in a relative URL');
    }
    get protocol() {
        throw new Error('protocol is not supported in a relative URL');
    }
    get port() {
        throw new Error('port is not supported in a relative URL');
    }
    get username() {
        throw new Error('username is not supported in a relative URL');
    }
    toJSON() {
        return this.href;
    }
    toString() {
        return this.href;
    }
    static canParse(url) {
        return URL.canParse(url, __classPrivateFieldGet(_a, _a, "f", _RelativeURL_fakeOrigin));
    }
    static parse(url) {
        if (!_a.canParse(url))
            return null;
        return new _a(url.toString());
    }
}
exports.RelativeURL = RelativeURL;
_a = RelativeURL;
_RelativeURL_fakeOrigin = { value: 'http://fakeorigin.com' };
//# sourceMappingURL=url.js.map