var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ViewerResourceBuilder_resources;
import { uniq, uniqBy } from '#lodash';
export var ViewerResourceType;
(function (ViewerResourceType) {
    ViewerResourceType["Model"] = "Model";
    ViewerResourceType["Object"] = "Object";
    ViewerResourceType["ModelFolder"] = "ModelFolder";
    ViewerResourceType["AllModels"] = "all-models";
})(ViewerResourceType || (ViewerResourceType = {}));
export class ViewerAllModelsResource {
    constructor() {
        this.type = ViewerResourceType.AllModels;
    }
    toString() {
        return 'all';
    }
}
export class ViewerModelResource {
    constructor(modelId, versionId) {
        this.type = ViewerResourceType.Model;
        this.modelId = modelId;
        this.versionId = versionId;
    }
    toString() {
        return (this.versionId ? `${this.modelId}@${this.versionId}` : this.modelId).toLowerCase();
    }
}
export class ViewerVersionResource extends ViewerModelResource {
    constructor(modelId, versionId) {
        super(modelId, versionId);
        this.versionId = versionId;
    }
    toJSON() {
        return this.toString();
    }
}
export class ViewerObjectResource {
    constructor(objectId) {
        this.type = ViewerResourceType.Object;
        this.objectId = objectId;
    }
    toString() {
        return this.objectId.toLowerCase();
    }
}
export class ViewerModelFolderResource {
    constructor(folderName) {
        this.type = ViewerResourceType.ModelFolder;
        this.folderName = folderName;
    }
    toString() {
        return ('$' + this.folderName).toLowerCase();
    }
}
export function parseUrlParameters(resourceGetParam) {
    if (!(resourceGetParam === null || resourceGetParam === void 0 ? void 0 : resourceGetParam.length))
        return [];
    const parts = resourceGetParam.toLowerCase().split(',').sort();
    const resources = [];
    for (const part of parts) {
        if (part === 'all') {
            resources.push(new ViewerAllModelsResource());
        }
        else if (part.includes('@')) {
            const [modelId, versionId] = part.split('@');
            resources.push(new ViewerModelResource(modelId, versionId));
        }
        else if (part.startsWith('$')) {
            resources.push(new ViewerModelFolderResource(part.substring(1)));
        }
        else if (part.length === 32) {
            resources.push(new ViewerObjectResource(part));
        }
        else {
            resources.push(new ViewerModelResource(part));
        }
    }
    // Remove duplicates
    return uniqBy(resources, (r) => r.toString());
}
export function createGetParamFromResources(resources) {
    const resourceParts = uniq(resources.map((r) => r.toString().toLowerCase())).sort();
    return resourceParts.join(',');
}
export const isAllModelsResource = (r) => r.type === ViewerResourceType.AllModels;
export const isModelResource = (r) => r.type === ViewerResourceType.Model;
export const isObjectResource = (r) => r.type === ViewerResourceType.Object;
export const isModelFolderResource = (r) => r.type === ViewerResourceType.ModelFolder;
class ViewerResourceBuilder {
    constructor() {
        _ViewerResourceBuilder_resources.set(this, []);
    }
    addAllModels() {
        __classPrivateFieldGet(this, _ViewerResourceBuilder_resources, "f").push(new ViewerAllModelsResource());
        return this;
    }
    addModel(modelId, versionId) {
        __classPrivateFieldGet(this, _ViewerResourceBuilder_resources, "f").push(new ViewerModelResource(modelId, versionId));
        return this;
    }
    addModelFolder(folderName) {
        __classPrivateFieldGet(this, _ViewerResourceBuilder_resources, "f").push(new ViewerModelFolderResource(folderName));
        return this;
    }
    addObject(objectId) {
        __classPrivateFieldGet(this, _ViewerResourceBuilder_resources, "f").push(new ViewerObjectResource(objectId));
        return this;
    }
    toString() {
        return createGetParamFromResources(__classPrivateFieldGet(this, _ViewerResourceBuilder_resources, "f"));
    }
    toResources() {
        return __classPrivateFieldGet(this, _ViewerResourceBuilder_resources, "f").slice();
    }
    clear() {
        __classPrivateFieldSet(this, _ViewerResourceBuilder_resources, [], "f");
        return this;
    }
}
_ViewerResourceBuilder_resources = new WeakMap();
/**
 * Fluent API for easier resource building
 */
export function resourceBuilder() {
    return new ViewerResourceBuilder();
}
//# sourceMappingURL=route.js.map